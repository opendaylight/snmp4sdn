
public class Activator extends ComponentActivatorAbstractBase/*, AbstractBindingAwareProvidermd-sal*/ {
    protected static final Logger logger = LoggerFactory
            .getLogger(Activator.class);
 
    private VLANProvider vlan = new VLANProvider();//md-sal


    public void destroy() {

        //md-sal
        vlan.close();
        super.destroy();
    }

    @Override
    public void start(BundleContext arg0) {
        super.start(arg0);
        vlan.setContext(arg0);
    }


    @Override
    public Object[] getGlobalImplementations() {
        Object[] res = { Controller.class, OFStatisticsManager.class,
                FlowProgrammerService.class, ReadServiceFilter.class,
                DiscoveryService.class, DataPacketMuxDemux.class, InventoryService.class,
                InventoryServiceShim.class, TopologyServiceShim.class,
                NodeFactory.class, NodeConnectorFactory.class,//s4s test: add this line
                ConfigService.class,
                
                vlan//md-sal
                };
        return res;
    }

    @Override
    public void configureGlobalInstance(Component c, Object imp) {

        //md-sal parts are as follows

        if (imp == vlan) {
            // c.setInterface(new String[] { IDiscoveryListener.class.getName(),
            // IContainerListener.class.getName(),
            // IRefreshInternalProvider.class.getName(),
            // IInventoryShimExternalListener.class.getName() }, null);
            c.add(createServiceDependency().setService(BindingAwareBroker.class)
                    .setCallbacks("setBroker", "unsetBroker").setRequired(true));
            logger.debug("configuring Binding Aware Provider - vlan");
        }
    }

}
